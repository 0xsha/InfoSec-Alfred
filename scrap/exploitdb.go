package scrap

/*
This file is part of Alfred
(c) 2020 - 0xSha.io
*/

import (
	"encoding/json"
	"github.com/jinzhu/gorm"
	"html"
	"log"
	"net/http"
	"strings"
)


type ExploitDBResp struct {
	Num0            string `json:"0"`
	Num1            string `json:"1"`
	Num2            string `json:"2"`
	Num3            string `json:"3"`
	Num4            string `json:"4"`
	Draw            int    `json:"draw"`
	RecordsTotal    int    `json:"recordsTotal"`
	RecordsFiltered int    `json:"recordsFiltered"`
	Data            []struct {
		ID                  string        `json:"id"`
		Description         []string        `json:"description"`
		TypeID              string        `json:"type_id"`
		PlatformID          string        `json:"platform_id"`
		AuthorID            []string      `json:"author_id"`
		DatePublished       string        `json:"date_published"`
		Verified            int           `json:"verified"`
		ApplicationPath     string        `json:"application_path"`
		ApplicationMd5      string        `json:"application_md5"`
		Port                int           `json:"port"`
		ScreenshotPath      string        `json:"screenshot_path"`
		ScreenshotThumbPath string        `json:"screenshot_thumb_path"`
		Tags                []interface{} `json:"tags"`
		Code                []interface{} `json:"code"`
		Type                struct {
			ID      string `json:"id"`
			Name    string `json:"name"`
			Display string `json:"display"`
		} `json:"type"`
		Platform struct {
			ID       string `json:"id"`
			Platform string `json:"platform"`
		} `json:"platform"`
		Author struct {
			ID   string `json:"id"`
			Name string `json:"name"`
		} `json:"author"`
		Download string `json:"download"`
	} `json:"data"`

}

func FetchExploitDB() (map[int][]string,error) {

	// url-encoded query is already filtered for 10 entities
	dtQuery :=  "&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=0&length=10"

	client := &http.Client{}


	// dataTables scraping technique
	requestUrl := "https://www.exploit-db.com/?draw=1" + dtQuery

	req, err := http.NewRequest("GET", requestUrl, nil)
	if err != nil {
		log.Println(err)
	}

	// well , let's make a fool out of it
	req.Header.Add("x-requested-with","XMLHttpRequest")

	resp , _  := client.Do(req)


	var exploitDB ExploitDBResp

	exploitDBArr := make(map[int][]string)


	decoded := json.NewDecoder(resp.Body)
	err = decoded.Decode(&exploitDB)

	if err != nil{
		log.Println(err)
		return nil,err
	}


	for i,line := range exploitDB.Data{

		link := line.ID
		title := line.Description[1]
		title = strings.TrimSpace(title)

			exploitDBArr[i] = []string{link,html.UnescapeString(title)}
	}

	return exploitDBArr,nil

}

func WriteExploitDBToDB(newsArr map[int][]string , entity Entity, db *gorm.DB) (int,error)  {

	totalFound := 0

	for _,key := range newsArr{

		entity.URL =  "https://www.exploit-db.com/exploits/"+key[0]
		entity.Title = key[1]
		entity.Source = "Exploit-DB"

		if err := db.Create(&entity).Error; err !=nil {
			log.Println(err)
		}else {
			totalFound++
		}
		entity.ID++
	}
	return totalFound,nil


}
